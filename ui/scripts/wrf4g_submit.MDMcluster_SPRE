#! /bin/bash
#
# Job submission abstraction layer
#
# These files (wrf4g_submit.*) are called with a 'jobfile' argument and an
# optional job identification to set up dependencies.  The only standard output
# should be a job identification for the job submitted (for its use on a
# subsequent call to this script)
#
jobfile=$1
depid=$2

source wrf4g.conf

if test -n "${depid}"; then
  depflag="-W depend=afterany:${depid}"
else
  depflag=""
fi

mpiexec="/software/ScientificLinux/4.6/mpiexec/bin/mpiexec"
mpiexec="/usr/bin/mpiexec"

if test "${NUMBER_OF_NODES}" -gt 1 -o "${PROCESSES_PER_NODE}" -gt 1; then
  nodflag="-l nodes=${NUMBER_OF_NODES}:ppn=${PROCESSES_PER_NODE}"
  echo "LAUNCHER_METGRID=\"\""                 >> wrf.chunk
  echo "LAUNCHER_REAL=\"\""                    >> wrf.chunk
  echo "LAUNCHER_WRF=\"$mpiexec -npernode ${PROCESSES_PER_NODE}\"" >> wrf.chunk
  echo "export P4_GLOBMEMSIZE=67108864" >> wrf.chunk
else
  nodflag=""
  echo "LAUNCHER_METGRID=\"\""              >> wrf.chunk
  echo "LAUNCHER_REAL=\"\""              >> wrf.chunk
  echo "LAUNCHER_WRF=\"\""               >> wrf.chunk
fi

rundir=${WRF4G_RUN_SHARED}/${WRF4G_EXPERIMENT}/${WRF4G_REALIZATION}/${WRF4G_CHUNK}
#
#   Avoid overwriting previous run directories. Move it to an unused name.
#
dircount=1
oldrundir="${rundir}.${dircount}"
while test -d ${oldrundir}; do
  let dircount++
  oldrundir="$(echo $oldrundir | sed -e 's/\.[0-9]*$//').${dircount}"
done
test -d ${rundir} && mv ${rundir} ${oldrundir}
#
#  Enter a cd command in your job file to go to the run path.
#  (qsub does not seem to have a flag to set the initial directory for the job)
#
command="cd ${rundir}"
echo -e "2i\n${command}\n.\nw\nq\n" | ed $jobfile >& /dev/null
#
#   Pack the sandbox
#
tar czh --exclude ${jobfile} -f sandbox.tar.gz *
#
#  Copy the sandbox to the running directory
#
mkdir -p ${rundir} || exit
cp -L sandbox.tar.gz ${rundir}/
cp -L WRF4G_ini.sh   ${rundir}/

qsub -q ${WRF4G_QUEUE_NAME} -N "${WRF4G_REALIZATION}" ${depflag} ${nodflag} $jobfile | awk -F. '{print $1}'
