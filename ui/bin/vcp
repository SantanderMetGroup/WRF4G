#!/usr/bin/env python

from optparse import OptionParser
import os.path
import sys
import traceback 

try:
    sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..','lib','python'))
    import vcp
except Exception, e:
    print 'Caught exception: %s: %s' % (e.__class__, str(e))
    traceback.print_exc(file=sys.stdout)
    sys.exit(-1)

#***************************************************************************#
#                                        VCP (MAIN)                                                     #
#***************************************************************************#

if __name__ == "__main__":
    usage = """%prog [OPTIONS] SOURCE DEST
    Example: %prog -r -p 10 /tmp/prueba gsiftp://se01.macc.unican.es/tmp/valva
    URL examples:
    LFC              lfn://vo.prod.eela-eu.eu@computer:/grid/valva
    GRIDFTP          gridftp://computer:2812/grid/valva
    RSYNC            rsync://valva@computer:34/grid/valva
    SIMBOLIC LINK    ln:///valva or ln:valva
    FILE             valva
    """
    parser = OptionParser(usage, version="%prog 1.0")
    parser.add_option("-p", dest="streams", help="Specify the number of parallel data connections should be used.", metavar="STREAMS")
    parser.add_option("-v", "--verbose", action="store_true", dest="verbose", default=False, help="Verbose mode. Explain what is being done")
    parser.add_option("-r", "--recursive", action="store_true", dest="recursive", default=False, help="Copy directories recursively")
    
    (options, args) = parser.parse_args()
    if options.verbose:
        stdout.write(" ".join(argv) + "\n")
    if len(args) != 2:
        parser.error("Incorrect number of arguments")
        exit(1)
        
    try:
        output = vcp.copy_file(args[0], 
                           args[1], 
                           verbose=options.verbose, 
                           recursive=options.recursive, 
                           streams=options.streams)
    except Exception, e:
        print 'Caught exception: %s: %s' % (e.__class__, str(e))
        traceback.print_exc(file=sys.stdout)
        sys.exit(-1)
    
       