#!/usr/bin/env python

from wrf4g_env import *
import WRF4Glib

usage="""

%prog [--dry-run] [--{exp Experiment |rea Realization|frea File}] [--verbose] [--help]

Synopsys:

wrf4g_kill command kill the jobs that belong to an experiment or realization. Addtionally, 
the experiment and realization ckunks, which have not done, will go back to "Prepared" status.
"""  
parser = OptionParser(usage,version="%prog 1.0")
parser.add_option("-n", "--dry-run",action="store_true", default=False, dest="dryrun",help="Perform a trial run with no changes made")
parser.add_option("-e", "--exp",metavar="name",dest="exp_name", help="Name of the experiment to sumbit")
parser.add_option("-r", "--rea",metavar="name",dest="rea_name", help="Name of the realization to sumbit")
parser.add_option("-F", "--frea",metavar="FILE",dest="rea_file", help="File containing the name of the realization to kill.")
parser.add_option("-v", "--verbose",action="store_true",default=False, dest="verbose",help="Verbose mode. Explain what is being done")

(options, args) = parser.parse_args()
if not options: parser.print_help()
try:
    if not (options.exp_name or options.rea_name or options.rea_file):
        # No experiment or realization given
        if not os.path.isfile('experiment.wrf4g'):
            print "Error. Please provide the name of the experiment to submit."
            sys.exit(1)
        else:
            exp_file=open('experiment.wrf4g').read()
            parsed=re.sub(r'\n\s+', '\n', exp_file)
            exec parsed
      
    if options.exp_name:
        exp=WRF4Glib.Experiment(data={'name':'%s'%options.exp_name},verbose=options.verbose,dryrun=options.dryrun)
        id=exp.get_id_from_name()
        if int(id) < 0:
            print "Experiment %s does not exists"%options.exp_name
            sys.exit(2)
        else:
            id=exp.get_id_from_name()
            reas=exp.get_run_reas_id()
            reas.extend(exp.get_wait_reas_id())
            for id_rea in reas:
                rea=WRF4Glib.Realization(data={'id':'%s'%id_rea},verbose=options.verbose,dryrun=options.dryrun)
                rea.stop_running_chunks()
    elif options.rea_name:
        rea=WRF4Glib.Realization(data={'name':'%s'%options.rea_name},verbose=options.verbose,dryrun=options.dryrun)
        id=rea.get_id_from_name()   
        if int(id) < 0:
            print "Realization %s does not exists"%options.rea_name
            sys.exit(3)
        else:
            rea.stop_running_chunks()
    elif options.rea_file:
        try:
            f=open(options.rea_file)
            for realization in f.readlines():
                realization=realization.rstrip()
                rea=WRF4Glib.Realization(data={'name':'%s'%realization},verbose=options.verbose,dryrun=options.dryrun)
                id=rea.get_id_from_name()
                if int(id) < 0 :
                    print "Realization with name %s does not exist"%realization
                else:
                    rea.stop_running_chunks()
        finally:
            f.close()
except Exception, e:
    print 'Caught exception: %s: %s' % (e.__class__, str(e))
    sys.exit(-1)
finally:
    if options.dryrun:
        WRF4Glib.dbc.rollback()
    else:
        WRF4Glib.dbc.commit()
    WRF4Glib.dbc.close()    
