#!/usr/bin/env python

from sys import stderr,stdout,exit,path
import sys
import os
import re

def sum_header():
	bold = "\033[1m"
	reset = "\033[0;0m"
	print bold + '%-10s %-3s %-3s %-3s %-3s %-3s'%("Experiment","P","W","R","D","F") + reset
	

def long_header():
    bold = "\033[1m"
    reset = "\033[0;0m"
    print bold + '%-18s %-3s %-4s %-6s %-10s %-10s %-13s %2s %3s'%('Realization','GW','Stat','Chunks','Comp.Res','WN','Run.Sta','ext','%') + reset
	
WRF4G_LOCATION=os.environ.get('WRF4G_LOCATION')
if WRF4G_LOCATION == None:
    sys.stderr.write('WRF4G_LOCATION is not defined. Please define it and try again\n')
    sys.exit(1)  

os.environ['DB4G_CONF']='%s/etc/db4g.conf'%WRF4G_LOCATION
DB4G_CONF=os.environ['DB4G_CONF']
if not os.path.isfile(DB4G_CONF):
   print 'DB4G_CONF do not exist'
   sys.exit(2)

sys.path.insert(0,'%s/lib/python'%WRF4G_LOCATION)
from optparse import OptionParser
import WRF4G
   
usage="""

%prog [--exp experiment] [--rea realization] [--long] [--running] [--help]

Synopsys:

Prints the experiment or realization status. 
"""  
parser = OptionParser(usage,version="%prog 1.0")
parser.add_option("-e", "--exp",metavar="name",dest="exp_name", help="Name of the experiment.")
parser.add_option("-r", "--rea",metavar="name",dest="rea_name", help="Name of the realization")
parser.add_option("-l", "--long",action="store_true",default=False,dest="long", help="Show a detailed status.")
#parser.add_option("-P", "--prepared",action="store_true",default=False, dest="prepare", help="Show realizations in Run(R) status.")
#parser.add_option("-W", "--wait",action="store_true",default=False, dest="wait", help="Show realizations in Wait(W) status")
#parser.add_option("-F", "--fail",action="store_true",default=False, dest="fail", help="Show realizations in Fail(F) status.")
#parser.add_option("-R", "--run",action="store_true",default=False, dest="run", help="Show realizations in Run(R) status.")
#parser.add_option("-D", "--done",action="store_true",default=False, dest="done", help="Show realizations in Done(D) status.")

(options, args) = parser.parse_args()

if options.exp_name:
    experiment_name=options.exp_name
    exp=WRF4G.Experiment(data={'name':'%s'%experiment_name})
    exp.data['id']=exp.get_id_from_name()
    if exp.data['id']<0:
        stderr.write("Experiment %s do not exists\n"%experiment_name)
        exit(1)
    elif options.long:
    	long_header()
        out=exp.ps()
        print out.rstrip()
    else:
        sum_header()
        out=exp.summarized_status()
        print out

elif options.rea_name:
    realization_name=options.rea_name
    rea=WRF4G.Realization(data={'name':'%s'%realization_name})
    out=rea.ps()
    long_header()
    print out.rstrip()


else:
    env=WRF4G.Environment()
    lexp=env.list_experiments()
    
    if options.long:
    	long_header()
        for id_exp in lexp:
           exp=WRF4G.Experiment(data={'id':'%s'%id_exp})
           out=exp.ps()
           stdout.write(out)
    else:
    	sum_header()
    	for id_exp in lexp:
           exp=WRF4G.Experiment(data={'id':'%s'%id_exp})    	
           out=exp.summarized_status()
           print out
           

WRF4G.dbc.commit()
WRF4G.dbc.close()


