#!/usr/bin/env python

from sys import stderr,stdout,exit,path
import exceptions
import os
import re

def sum_header(number_of_characters_Experiment):
    bold  = "\033[1m"
    reset = "\033[0;0m"
    string_to_print = bold + '%-'+ str(number_of_characters_Experiment) + 's %-3s %-3s %-3s %-3s %-3s' + reset
    print string_to_print % ("Experiment","P","W","R","D","F")
	

def long_header(number_of_characters_Realization):
    bold  = "\033[1m"
    reset = "\033[0;0m"
    string_to_print = bold + '%-' + str(number_of_characters_Realization) + 's %-3s %-4s %-6s %-10s %-10s %-13s %2s %3s' + reset
    print string_to_print % ('Realization','GW','Stat','Chunks','Comp.Res','WN','Run.Sta','ext','%')
	
WRF4G_LOCATION=os.environ.get('WRF4G_LOCATION')
if WRF4G_LOCATION == None:
    stderr.write('WRF4G_LOCATION is not defined. Please define it and try again\n')
    exit(1)  

os.environ['DB4G_CONF']='%s/etc/db4g.conf'%WRF4G_LOCATION
DB4G_CONF=os.environ['DB4G_CONF']
if not os.path.isfile(DB4G_CONF):
    print 'DB4G_CONF do not exist'
    exit(2)

path.insert(0,'%s/lib/python'%WRF4G_LOCATION)
from optparse import OptionParser
import WRF4G
   
usage="""

%prog [--{exp Experiment|rea Realization}] [--long] [--ncharacters] [--help]

Synopsys:

Prints the experiment or realization status. 
"""  
parser = OptionParser(usage,version="%prog 1.0")
parser.add_option("-e", "--exp",metavar="name",dest="exp_name", help="Name of the experiment.")
parser.add_option("-r", "--rea",metavar="name",dest="rea_name", help="Name of the realization")
parser.add_option("-l", "--long",action="store_true",default=False,dest="long", help="Show a detailed status.")
parser.add_option("-n", "--ncharacters",default=20,type="int",dest="number_of_characters", help="Print n characters of the name of the Experiment or Realization (default value is 20 characters)")

(options, args) = parser.parse_args()

try:
    if options.exp_name:
        experiment_name=options.exp_name
        exp=WRF4G.Experiment(data={'name':'%s'%experiment_name})
        exp.data['id']=exp.get_id_from_name()
        if exp.data['id']<0:
            stderr.write("Experiment %s do not exists\n"%experiment_name)
            exit(1)
        elif options.long:
    	    long_header(options.number_of_characters)
            exp.ps(options.number_of_characters)
        else:
            sum_header(options.number_of_characters)
            exp.summarized_status(options.number_of_characters)
    elif options.rea_name:
        realization_name=options.rea_name
        rea=WRF4G.Realization(data={'name':'%s'%realization_name})
        long_header(options.number_of_characters)
        rea.ps(options.number_of_characters)
    else:
        env=WRF4G.Environment()
        lexp=env.list_experiments()
        if options.long:
    	    long_header(options.number_of_characters)
            for id_exp in lexp:
                exp=WRF4G.Experiment(data={'id':'%s'%id_exp})
                exp.ps(options.number_of_characters)
        else:
    	    sum_header(options.number_of_characters)
    	    for id_exp in lexp:
                exp=WRF4G.Experiment(data={'id':'%s'%id_exp})    	
                out=exp.summarized_status(options.number_of_characters)
except exceptions.SystemExit:
    WRF4G.dbc.rollback()
    WRF4G.dbc.close()
    exit(-1)
else: 
    WRF4G.dbc.commit()
    WRF4G.dbc.close()


