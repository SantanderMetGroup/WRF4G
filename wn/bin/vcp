#!/usr/bin/python

from optparse import OptionParser

from re import match
from sys import exit
from commands import getstatusoutput
from os import popen 
from os import getcwd
from os.path import abspath
from os.path import isdir
import datetime

URL_BAD_FORMED=1
COPY_ERROR=2

class VCPURL:
  def __init__(self,url=None):
    """From a url (rsync://valva@sipc18:80/etc) it returns an array with 
    the following field [protocol,user,computer,port,file]"""
 
    self.protocol = ""
    self.user = ""
    self.computer = ""
    self.port = ""
    self.file = ""
  
    if url:
      # Split the url if the begging is protocol:. 
      g0= match("([a-z]+):(.+)", url)
      
      # There's no protocol in the url
      if g0 == None :
         self.protocol= "file"
         self.file = url
      
      else :
        # The url contains a protocol
         (self.protocol,self.file)=g0.groups()
        
         # This is from URL with the form: gsiftp://ce01.macc.unican.es   
         position=self.file.find('//')
         if position == 0 :
           g1=match("//([\w.@-]*):?(\d*)(/\S*)",self.file)         
           if g1 == None :
                print  "The url is not well formed. //"
                exit(URL_BAD_FORMED)
           else :
                (self.computer,self.port,self.file)=g1.groups()
          
                if self.computer.find("@")!= -1 :
                    (self.user,self.computer)=self.computer.split("@")
        
        
    
  def __str__(self):
     """ It returns an url from a array with 
     the following field [protocol,user,computer,port,file]"""
    
     # Fill the variables: protocol, user, computer, port and file 
     
     # user
     if self.user !="" : user=self.user+"@"
     else : user=""
  
     # computer 
     computer = self.computer
     
     # port 
     if self.port !="" or self.protocol == "rsync" : port=":" + self.port
     else : port=""
  
     # file 
     file = self.file
 
     # protocol
     if self.protocol=="rsync" : 
        protocol=""
 
     # Transform local path to file://. If the file is a directory we add / at the end because
     # globus-url-copy works this way.
     elif self.protocol=="file": 
        protocol=self.protocol + "://"
        file=abspath(file)
     
     else : protocol = self.protocol + "://"
  
     url= protocol + user + computer + port + file 
     return url
     
  def ls(self,file):
     """ List all the files under the directory """
     command_dict= {'file': 'ls -1', 'gsiftp': 'edg-gridftp-ls'}
     file_dict= {'file': self.file, 'gsiftp': str(self)}

     command="%s %s/%s" % (command_dict[self.protocol],file_dict[self.protocol],file)
     (err,out)=getstatusoutput(command)
     
     if err != 0 :
        print "Error listing file: " + str(err) + "\n" + out
        exit(COPY_ERROR)
     
     out_list=out.split("\n")
     
     for file2del in [".",".."] :
       if file2del in out_list:
         out_list.remove(file2del)
     
     return out_list  


def copy_file(origin,destination,verbose=False,recursive=False,streams=False):
  """Copies origin in destination. Both are arrays containing 
   the following field [protocol,user,computer,port,file]"""

  orig=VCPURL(origin)
  dest=VCPURL(destination)

  flags=""

  if orig.protocol == "file" :
    if dest.protocol == "file" :
       if verbose :   flags="-v "
       if recursive:  flags=flags + "-R"
       command="cp %s %s %s" % (flags, orig.file, dest.file)

    elif dest.protocol == "ln" :
       if verbose :   flags="-v"
       command="ln -s %s %s %s" % (flags, orig.file, dest.file)

    elif dest.protocol == "rsync" :
       if verbose :   flags="-v"
       command="rsync -au %s %s %s" % (flags, orig.file, dest)

    elif dest.protocol == "gsiftp" :
       destiny = str(dest)
       origin = str(orig)
       if verbose :   flags="-v "
       if recursive:  
          flags=flags + "-r -cd "
          destiny = destiny + "/"
          origin = origin + "/"
       else : 
          if origin.find("*") != -1 : destiny = destiny + "/"
       
       command="globus-url-copy %s %s %s" % (flags, origin, destiny)

 
  elif orig.protocol == "gsiftp" :  
     if dest.protocol == "file" :
       destiny = str(dest)
       origin = str(orig)
       if verbose :   flags="-v "
       if recursive:  
          flags=flags + "-r -cd "
          destiny = destiny + "/"
          origin = origin + "/"
       else :
          if origin.find("*") != -1 : destiny = destiny + "/"
          if isdir(dest.file) :
             dest_list=origin.split("/")
             destiny = destiny + "/" + dest_list[-1]
   
       command="globus-url-copy %s %s %s" % (flags, origin, destiny)

   # Execute the command that copy the files
  if verbose :    print command
  (err,out)=getstatusoutput(command)


  if err != 0 :
     print "Error copying file: " + str(err) + "\n" + out
     exit(COPY_ERROR)

 
  return out

def datewrf2iso (datewrf):
  g=match("(\d{4})-(\d{2})-(\d{2})_(\d{2}):(\d{2}):(\d{2})",datewrf)
  if g is None :
      print "Error: Date is not well formed"
      exit(DATE_BAD_FORMED)
  
  date_tuple=g.groups()  
  date_object=datetime.datetime(*tuple(map(int,date_tuple)))
  date=date_object.strftime("%Y%m%dT%H%M%SZ")
  return date  
   

#***************************************************************************#
#                  VCP (MAIN)                                               #
#***************************************************************************#

if __name__ == "__main__":
   usage="""%prog [OPTIONS] SOURCE DEST
   
   Example: %prog -r -p 10 /tmp/prueba gsiftp://se01.macc.unican.es/tmp/valva
   
   URL examples:
   LFC              lfn://vo.prod.eela-eu.eu@computer:/grid/valva
   GRIDTP           gridftp://computer:2812/grid/valva
   RSYNC            rsync://valva@computer:34/grid/valva
   SIMBOLIC LINK    ln:///valva or ln:valva
   FILE             valva
   """
   
   parser = OptionParser(usage,version="%prog 1.0")
   parser.add_option("-p", dest="streams",help="Specify the number of parallel data connections should be used.", metavar="STREAMS")
   parser.add_option("-v", "--verbose",action="store_true", dest="verbose", default=False,help="Verbose mode. Explain what is being done")
   parser.add_option("-r", "--recursive",action="store_true", dest="recursive", default=False,help="Copy directories recursively")
   
   (options, args) = parser.parse_args()
   
   if len(args) != 2:
      parser.error("Incorrect number of arguments")
      exit(1)
   
   output=copy_file(args[0],args[1],verbose=options.verbose,recursive=options.recursive,streams=options.streams)   
   print output
   

