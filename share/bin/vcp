#!/usr/bin/python

from optparse import OptionParser

from re import match
from sys import exit
from commands import getstatusoutput
from os import popen 
from os import getcwd
from os.path import abspath
from os.path import isdir



def parse_url(url):
  """From a url (rsync://valva@sipc18:80/etc) it returns an array with 
  the following field [protocol,user,computer,port,file]"""
  
  URL_BAD_FORMED=1
  COPY_ERROR=2

  url1=url.split(":",1)
  if len(url1) > 3 :
    print "The url is not well formed. Too many :"
    exit(URL_BAD_FORMED)
 
  url_parsed=[url1[0],"","","",""]
 
  if  len(url1) != 1 :
    position=url1[1].find('//')
    if position == 0 :
      g1=match("//([\w.@-]*):?(\d*)(/\S*)",url1[1])
 
      if g1 == None :
        print  "The url is not well formed. //"
        exit(URL_BAD_FORMED)
     
      gs=g1.groups()
      url_parsed[2:]=gs[:]

      if gs[0].find("@")!= -1 :
        g2=gs[0].split("@")
        url_parsed[1:3]=g2[:]
        #url_parsed[1]=g2[0]
        #url_parsed[2]=g2[1]
 
    else :
        #ln, lfn or file style
        url_parsed[4]=url1[1]
    
  else :
  # FILE
    url_parsed[0]="file"
    url_parsed[4]=url1[0]
  return url_parsed



def copy_file(origin,destination,verbose=False,recursive=False,streams=False):
  """Copies origin in destination. Both are arrays containing 
   the following field [protocol,user,computer,port,file]"""

  orig=parse_url(origin)
  dest=parse_url(destination)

  flags=""
  if orig[0] == "file" :

    if dest[0] == "file" :
       if verbose :   flags="-v "
       if recursive:  flags=flags + "-R "
       command="cp " + flags + orig[4]+ " " + dest[4]

    elif dest[0] == "ln" :
       if verbose :   flags="-v "
       command="ln -s " + flags + orig[4]+ " " + dest[4]

    elif dest[0] == "rsync" :
       if verbose :   flags="v"
       command="rsync -au" + flags + " " + orig[4] + " " + create_url(dest)

    elif dest[0] == "gsiftp" :
       destiny = create_url(dest)
       origin = create_url(orig)
       if verbose :   flags="-v "
       if recursive:  
          flags=flags + "-r -cd "
          destiny = destiny + "/"
          origin = origin + "/"
       else : 
          if origin.find("*") != -1 : destiny = destiny + "/"
       
       command="globus-url-copy " + flags + " " + origin + " " + destiny

 
  elif orig[0] == "gsiftp" :  
     if dest[0] == "file" :
       destiny = create_url(dest)
       origin = create_url(orig)
       if verbose :   flags="-v "
       if recursive:  
          flags=flags + "-r -cd "
          destiny = destiny + "/"
          origin = origin + "/"
       else :
          if origin.find("*") != -1 : destiny = destiny + "/"
   
       command="globus-url-copy " + flags + " " + origin + " " + destiny

   # Execute the command that copy the files
  if verbose :    print command
  (err,out)=getstatusoutput(command)

  if err != 0 :
     print "Error copying file: " + str(err) + "\n" + out
     exit(COPY_ERROR)
  return out

def create_url(url):
   """ It returns an url from a array with 
   the following field [protocol,user,computer,port,file]"""
   
  
   # Fill the variables: protocol, user, computer, port and file 
   
   # user
   if url[1] !="" : user=url[1]+"@"
   else : user=""
 
   # computer 
   computer = url[2]
   
   # port 
   if url[3] !="" or url[0]=="rsync" : port=":" + url[3]
   else : port=""
 
   # file 
   file = url[4]
   

   # protocol
   if url[0]=="rsync" : 
      protocol=""

   # Transform local path to file://. If the file is a directory we add / at the end because
   # globus-url-copy works this way.
   elif url[0]=="file": 
      protocol=url[0] + "://"
      file=abspath(file)
   
   else : protocol = url[0] + "://"
 
   url= protocol + user + computer + port + file 
   return url

   

#***************************************************************************#
#                  VCP (MAIN)                                               #
#***************************************************************************#

if __name__ == "__main__":
   usage="""%prog [OPTIONS] SOURCE DEST
   
   Example: %prog -r -p 10 /tmp/prueba gsiftp://se01.macc.unican.es/tmp/valva
   
   URL examples:
   LFC              lfn://vo.prod.eela-eu.eu@computer:/grid/valva
   GRIDTP           gridftp://computer:2812/grid/valva
   RSYNC            rsync://valva@computer:34/grid/valva
   SIMBOLIC LINK    ln:///valva or ln:valva
   FILE             valva
   """
   
   parser = OptionParser(usage,version="%prog 1.0")
   parser.add_option("-p", dest="streams",help="Specify the number of parallel data connections should be used.", metavar="STREAMS")
   parser.add_option("-v", "--verbose",action="store_true", dest="verbose", default=False,help="Verbose mode. Explain what is being done")
   parser.add_option("-r", "--recursive",action="store_true", dest="recursive", default=False,help="Copy directories recursively")
   
   (options, args) = parser.parse_args()
   
   if len(args) != 2:
      parser.error("Incorrect number of arguments")
      exit(1)
   
   a=copy_file(args[0],args[1],verbose=options.verbose,recursive=options.recursive,streams=options.streams)   
   print "salida: " + a
   

